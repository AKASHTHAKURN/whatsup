package com.lgcns.tct.aggregate;

/*
 * 완전 알고리즘 문제
 * 2차원 배열내에서 영역에 대한 처리 알고리즘
 * 솔루션 풀이방법은 복잡함
 * 난이도 상
 */
public class Aggregate {

	// 부분 배열의 개수를 구하는 기능
	public int getNumberOfSubArrays(int arrLength) {
		
		int [][] buf = new int[arrLength][arrLength];
		int sum = 0;

		// 각 배열의 위치에서 행,열을 배열크기로 상대적으로 지정하여 배열접근이 가능하면 카운트 하는 방식
		// 3중 루프 사용
		
		for(int t=0; t<arrLength; t++) {			// 배열크기 증가
			
			for(int i=0; i<arrLength; i++) {		// 행 위치
				for(int k=0; k<arrLength; k++) {	// 열 위치
			
					if (i+t<arrLength &&  k+t<arrLength) {
						buf[i+t][k+t] = 0;
						sum++;
						//System.out.println( "t=" + (t+1) + " " + (i+t) + " " + (k+t) );
					}
				}	
			}
		}

		return sum;
	}
	
	// 최대값을 찾는 기능
	public int getMaximumValue(int[][] inputData) {
		
		int arrLength = inputData.length;
		int max = 0;
		int sum = 0;

		for(int t=0; t<arrLength; t++) {

			for(int i=0; i<arrLength; i++) {
				for(int k=0; k<arrLength; k++) {
				
					sum = 0;
					for(int x=i; x<=i+t; x++) {				// i+t
						for(int y=k; y<=k+t; y++) {			// k+t 까지 더해줘야 한다
							
							if (x < arrLength &&  y < arrLength)
								sum += inputData[x][y];
							
						}
					}		
					if (sum > max) max = sum;		
				}	
			}
		}
		
		return max;
	}
	
}
