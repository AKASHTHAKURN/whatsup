배열 행열 정렬
	
	// Arrays.sort는 내림차순만 지원, 따라서 콜렉션을 사용해서 정렬하는 방법도 나쁘지 않음
	public int[][] getSortedArray_1(int[][] inputData) {

		for(int i=0; i<inputData.length; i++) {
			for(int k=0; k<inputData[i].length; k++) {
				inputData[i][k] = inputData[i][k] % 10;	
			}
		}

		for(int i=0; i<inputData.length; i++) {
			
			ArrayList<Integer> al = new ArrayList<Integer>();
			
			for(int k=0; k<inputData[i].length; k++) {
				al.add(inputData[i][k]);
	        }

			Collections.sort(al);
			
			for(int k=0; k<inputData[i].length; k++) {
				inputData[i][k] = al.get(k);
	        }
		}

		for(int k=0; k<inputData.length; k++) {
			
			ArrayList<Integer> al = new ArrayList<Integer>();
			
			for(int i=0; i<inputData[k].length; i++) {
				al.add(inputData[i][k]);
	        }

			Collections.sort(al);
			
			for(int i=0; i<inputData[k].length; i++) {
				inputData[i][k] = al.get(i);
	        }
		}
		
		return inputData;
		
	}

	// 개선 - Arrays.sort 시용
	public int[][] getSortedArray(int[][] inputData) {

		int len = inputData.length;	
		
		// 나머지 연산
		for(int i=0; i<inputData.length; i++) {
			for(int k=0; k<inputData[i].length; k++) {
				inputData[i][k] = inputData[i][k] % 10;	
			}
		}

		// 행 정렬
		for(int i=0; i<len; i++) {
			Arrays.sort(inputData[i]);
		}

		// 열 정렬
		for(int k=0; k<len; k++) {

			int[] temp = new int[len];
			
			for(int i=0; i<len; i++) {
				temp[i] = inputData[i][k];
	        }

			Arrays.sort(temp);

			for(int i=0; i<len; i++) {
				inputData[i][k] = temp[i];
	        }
		}
		
		return inputData;
	}


	public int getArrSum(int[][] sortedArray) {

		int len = sortedArray.length;
		int[][] result = new int[len][len];
		
		for(int i=0; i<len; i++)
			System.arraycopy( sortedArray[i], 0, result[i], 0, len );	// 루프 돌리면 행단위 복사

		for(int i=0; i<len; i++) {
			
			for(int k=0; k<len; k++) {

				if (i-1 >= 0 && sortedArray[i][k] == sortedArray[i-1][k]) {
					result[i][k] = 0; result[i-1][k] = 0;
				}	

				if (i+1 < len && sortedArray[i][k] == sortedArray[i+1][k]) {
					result[i][k] = 0; result[i+1][k] = 0;
				}	

				if (k-1 >= 0 && sortedArray[i][k] == sortedArray[i][k-1]) {
					result[i][k] = 0; result[i][k-1] = 0;
				}	

				if (k+1 < len && sortedArray[i][k] == sortedArray[i][k+1]) {
					result[i][k] = 0; result[i][k+1] = 0;
				}
			}
		}

		int sum = 0;
		for(int i=0; i<result.length; i++) {
			for(int k=0; k<result[i].length; k++) {
				sum += result[i][k];	
			}
		}
		
		return sum;
	}

	public int getArrSum_1(int[][] sortedArray) {

		int len = sortedArray.length;
		
		int[][] result = new int[len][len];
		
		// 2차원 배열 copy 이렇게 하면 안된다
		// System.arraycopy(sortedArray, 0, result, 0, len);

		for(int i=0; i<len; i++) {
			for(int k=0; k<len; k++) {
				result[i][k] = sortedArray[i][k]; 
			}
		}

		for(int i=0; i<len; i++) {
			
			for(int k=0; k<len; k++) {

				if (i-1 >= 0 && sortedArray[i][k] == sortedArray[i-1][k]) {
					result[i][k] = 0; result[i-1][k] = 0;
				}	

				if (i+1 < len && sortedArray[i][k] == sortedArray[i+1][k]) {
					result[i][k] = 0; result[i+1][k] = 0;
				}	

				if (k-1 >= 0 && sortedArray[i][k] == sortedArray[i][k-1]) {
					result[i][k] = 0; result[i][k-1] = 0;
				}	

				if (k+1 < len && sortedArray[i][k] == sortedArray[i][k+1]) {
					result[i][k] = 0; result[i][k+1] = 0;
				}
			}
		}

		int sum = 0;
		for(int i=0; i<result.length; i++) {
			for(int k=0; k<result[i].length; k++) {
				sum += result[i][k];	
				//System.out.print(result[i][k] + " ");
			}
			//System.out.println();
		}
		
		return sum;
	}

		
}
