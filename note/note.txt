==============================================================================
[TCT기출문제]2018년_개발언어-A_실기형_1

1. 막대
- N개의삼각형만들기막대개수(5점)
- N층의피라미드만들기막대개수(5점)
난이도 하, 루프 연산

2. 데이터 복원 (결함수정)
난이도 중
2-1
[원본데이터] we1re3hewo34ddre67com21rue
[백업데이터] 1eare4hewor5dd8eamcome3rue
[1차복원된데이터]weare3hewor4ddreamcome1rue
- 빈 문자열 새로 생성하여 비교하면서 원본 이나 백업 한글자씩 빈문자열에 복사
  이때 String으로 처리해야 하므로 
- 문자열에서 특정문자 제거 String.replace("a", "")
2-2
[1차복원된데이터] weare3hewor4ddreamcome1rue
[네트워크에저장된데이터] wear etheworlddreamcometrue
[2차복원된데이터]wearetheworlddreamcometrue

3. 악성코드
난이도 하
- 문자열에 특정 문자 혹은 문자열 포함여부 판단 및 제거, String.contains 사용

4. 최대합
난이도 상
- NxN 배열 
 * 완전 알고리즘 문제
 * 2차원 배열내에서 영역에 대한 처리 알고리즘
- 작은배열이 몇개 들어갈수 있는지 조사 => 3중 루프, 1개 루프로 배열크기 늘임
- 부분배열의 합 구하기

5. 카테고리
난이도 중상
- 트리탐색
- 상위노드 찾기
- 임의 노드의 하위노드 전부 찾기 -> 재귀함수 사용

==============================================================================
[TCT기출문제]2018년_개발언어-A_실기형_2

1. 문자연산
[초기입력데이터]
A37D2CB5E8F
--------------------------------------------------------------------
[문자로구성된문자열]: ADCBEF
[숫자로구성된문자열]: 37258
--------------------------------------------------------------------
[결과로생성된문자열]: A3D7C2B5E8F
----------------------------------------------
- String.charAt 사용하여 문자, 숫자 분리
- 루프돌면서 하나씩 append

2. 주차장
[초기입력데이터]
차량번호  주차시간(분)
11가1234  10
34오6789  20
76나2323  45
33노8989 120
99이3810  35
46거6677  20
47마9087  60
90오2345  70
90우9999  80
45소1122  10
23노8888  35
78이2345  44
88구1212  20
--------------------------------------------------------------------
[차종별주차대수]
승용차: 7대
승합차: 2대
화물차: 3대
특수차: 1대
--------------------------------------------------------------------
[주차요금합계]: 12000원
--------------------------------------------------------------------
- substring으로 타입분리 후 차종별 add
- 주차시간 30분 이상 차종별 계산

3. 연속수
[연속수목록]
입력: 2234 123 5678 456 8978 3321 12 345 689
출력: 123 5678 456 12 345
--------------------------------------------------------------------
[가장큰수]
입력: 123 5678 456 12 345
출력: 567812
--------------------------------------------------------------------
- String.charAt 사용 숫자로 변환후 루프돌면서 다음것과 연속인지 비교
- 연속수를 리스트에 넣고 정렬 후 min, max 만들어 보기

4. 배열합
[초기입력데이터]
77 78 12 30
33 78 9 7
5 71 84 25
9 37 0 27
--------------------------------------------------------------------
[정렬된배열]
0 2 5 5
0 4 7 8
1 7 7 9
3 7 8 9
--------------------------------------------------------------------
[배열합]: 26
--------------------------------------------------------------------
- 행요소 Arrays.sort 사용정렬
- 열요소 : 루프돌면서 임시배열에 넣고 정렬 후 원래 배열에 넣는다
- 루프돌면서 2차원 배열의 상,하,좌,우 값 확인
- 2차원 배열 복사 시 주의할 것(행단위로 Arrays.copy 수행)

5. 유전자
[초기입력데이터]
유전자문자열: AGTCATG,GTTAG
--------------------------------------------------------------------
[단순비교방식의유사도측정]
유사도: 3
--------------------------------------------------------------------
[행렬비교방식의유사도측정]
유사도: 12
--------------------------------------------------------------------
- StringBuilder 사용하여 두개의 문자열 쉬프트 처리 (앞으로 밀기, 뒤로 밀기, 비교)

==============================================================================

- String에서 일부 문자열 제거시 
str.replace("abc", "") null로 지정하면 된다

- 문자열 포함여부
str.contains(".txt") 
 or
if (s.indexOf(".txt") > -1)



==============================================================================

- 콘솔 입력받기

- ArrayList 데이터를 객체로 받기
- ArrayList 데이터 정렬 (객체포함)

- HashMap 생성 및 데이터 출력


? HashMap 데이터 정렬

==============================================================================

Set
- HashSet 중복불허, 입력순서 보장하지 않음
- TreeSet 중복불허, 오름차순 정렬
- LinkedHashSet 중복불허, 입력된 순서를 보장

Map : [k,v] 키값 중복불허

- HashMap 입력순서 보장안함
- TreeMap 키값으로 정렬
- LinkedHashMap 입력순서 보장

==============================================================================

- Arrays.sort 는 오름차순만 지원, 내림차순하려면 List에서 수행
int [] arr;
List<int[]> list = Arrays.asList(arr);
Collections.revesal(list); // arr이 내림차순으로 정렬되어 있음

- 배열크기	
arr[5][2]
arr.length = 5      // 행길이
arr[i].length = 2   // 열크기
	 



==============================================================================

- 콘솔 입력받기

	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	while (true) {
		String input = br.readLine();
		if (input.equals("quit")) {
			break;
		}
	}	
	br.close();

- ArrayList 데이터를 객체로 받기		

	ArrayList<Score> al = new ArrayList<Score>(); 
	al.add(new Score("Tommy Lee",  100, 95, 90));

class Score {
	String name;
	int kor;
	
	Score(String name, int kor, int mat, int eng) {
		this.name = name;
		this.kor = kor;
	}

	String getName() {
		return this.name;
	}

	int getKor() {
		return this.kor;
	}

	@Override
	public String toString() {
		return "Score [name=" + name + ", kor=" + kor + ", mat=" + mat + ", eng=" + eng + "]";
	}
}

- ArrayList 데이터 정렬 (객체포함)

	// 문자열 정렬은 compareTo 사용
	Collections.sort(al, (g1, g2) -> g1.getName().compareTo(g2.getName()));
	// 정수형 정렬은 빼기 연산
	Collections.sort(al, (g1, g2) -> (g2.getKorean() - g1.getKorean()));
	// g1, g2 순서를 바꾸면 오름->내림차순
	
- HashMap 생성 및 데이터 출력

		HashMap<String, String> m = new HashMap<>(); 
		m.put("kit@gmail.com", "Michael Knight"); 
		m.put("knife@gmail.com", "Mac Guyver"); 
		for ( String key : m.keySet() ) { 
			System.out.println( key + " : " + m.get( key ) ); 
		}
	
		