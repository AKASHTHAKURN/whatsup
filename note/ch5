Chapter 05. 상위 설계

요약

- 상위 설계 (예비 설계)
•아키텍처(구조) 설계 : 시스템의 전체적인 구조를 나타낸다.
•데이터 설계 : 시스템에 필요한 정보를 자료구조와 데이터베이스 설계에 반영한다.
•시스템 분할 : 전체 시스템을 여러 개의 서브시스템으로 나눈다.
•인터페이스 정의 : 시스템의 구조와 서브시스템들 사이의 인터페이스가 명확히 정의된다.
•사용자 인터페이스 설계 : 사용자가 익숙하고 편리하게 사용할 수 있도록 사용자 인터페이스를 설계한다

- 하위 설계 (모듈설계, 자료구조 설계, 알고리즘 설계)
•각 모듈의 실제적인 내부를 알고리즘(pseudo-code) 형태로 표현한다.
•인터페이스에 대한 설명, 자료구조, 변수 등에 대한 상세한 정보를 작성한다.

01. 좋은 설계의 조건
	• 요구 분석 명세서의 내용을 설계서에 모두 포함해야 한다.
	• 유지보수가 용이하도록 추적이 가능해야 한다.
	• 변화에 쉽게 적응할 수 있어야 한다.
	• 시스템 변경으로 인한 영향이 최소화되도록 국지적이어야 한다.
	• 설계서는 읽기 쉽고, 이해하기 쉽게 작성해야 한다.

02. 분할과 정복
	가장 세분화된 작은 시스템을 개발하고, 하나씩 위로 올라가면서 완성시키는 방법으로 개발하는 것을 '분할과 정복의 원리'라고 한다. 
	이 원리는 하나의 일을 수행할 때 작은 단위로 나누고 각 작은 단위를 하나씩 처리하여 전체 일을 끝낸다는 의미이다.

03. 추상화
	주어진 문제(건물 도면)에서 현재의 관심사에 초점을 맞추기 위해, 특정한 목적과 관련된 필수 정보만 추출하여 강조하고
	(전기 배선도, 상하수도 배관도 등) 관련이 없는 세부 사항을 생략함으로써 본질적인 문제에 집중할 수 있도록 하는 작업이다.

04. 단계적 분해
	기능을 점점 작은 단위로 나누어 점차적으로 구체화하는 방법으로 하향식 설계에서 사용된다. 
	구조적 분석 방법에서 사용하는 자료흐름도가 단계적 분해의 예이다.

05. 소프트웨어 아키텍처
	개발할 소프트웨어의 구조, 주요 구성 요소, 구성 요소의 속성, 구성 요소 간의 관계와 상호작용을 판단하고 결정하는 것이다. 
	좀 더 넓은 의미로는 사용자의 요구 사항을 충분히 반영한 소프트웨어의 목표와 프로그래밍 사이를 연결하는 것이라 할 수 있다.

*06. 시스템 품질 속성
	• 가용성 : 시스템이 운용될 수 있는 확률로, 사용 중인 시스템이 장애 발생 없이 서비스를 제공할 수 있는 능력을 말한다.

	• 변경 용이성 : 변경 요구 사항을 받았을 때 쉽게 변경할 수 있는 능력을 말한다.

	• 성능 : 사용자 요청과 같은 이벤트가 발생했을 때, 빠르고 적절하게 반응할 수 있는 능력이다.

	• 보안성 : 허용되지 않은 접근에 대응할 수 있는 능력이다. 시스템 접근의 적법성을 가려 승인되지 않은 사용을 차단하고 올바른 사용자에게 서비스가 제공될 수 있게 한다.

	• 사용성 : 소프트웨어를 사용할 때 혼란스러워하거나 사용하는 순간에 고민하지 않게 하는 편의성을 말한다.

	• 테스트 용이성 : 사용자가 요구하는 기능을 만족스럽게 잘 수행하고 있는가에 대해 얼마나 쉽고 철저하게 테스트할 수 있는지를 나타낸다.

07. 비즈니스 품질 속성
	• 시장 적시성 : 정해진 날짜에 소프트웨어를 출시해 경쟁력을 높일 수 있는 정도를 말한다.

	• 비용과 이익 : 비용을 더 들여 사용하고 효과를 볼 것인지, 아니면 비용을 절약하는 데 중심을 둘 것인지를 말한다.

	• 예상 시스템 수명 : 개발하는 시스템의 예상 시스템 수명이 중요한 경우라면 시스템의 여러 품질 속성 중에서 오랫동안 수정·보완하며 사용할 수 있는 변경 용이성, 확장성, 이식성을 더 중요하게 고려해야 한다.

	• 목표 시장 : 일반인이 많이 사용하는 패키지 같은 소프트웨어는 타사 제품과 비교했을 때 기능이 중요한 항목이다. 따라서 기능성이 매우 중요하고, 다양한 플랫폼에서도 잘 작동되어야 하므로 시스템 품질 속성 중 이식성이 충분히 고려되어야 한다.

	• 신규 발매 일정 또는 공개 일정 : 현재 버전에서는 기본 기능만 제공하고, 추후에 배포할 차기 버전에서 기능을 추가하여 완성도를 높일 예정이라면 시스템 품질 속성 중 유연성(flexibility)과 확장성을 중요한 속성으로 고려해야 할 것이다.

	• 기존 시스템과의 통합 : 개발할 시스템을 기존 시스템과 통합해야 한다면 통합 방법이 필요하다. 따라서 아키텍처를 설계할 때 해결 방안을 충분히 생각해야 한다.

08. 아키텍처 품질 속성
	• 개념적 무결성 : 일관성이라고도 한다. 시스템 설계는 전체 시스템을 나타내는 설계와 세부 구성 요소에 대한 설계로 나뉘는데, 세부 구성 요소를 전체 시스템으로 통합하더라도 일관성이 유지되어야 한다. 따라서 전체 시스템과 시스템 구성 요소가 일관되도록 아키텍처를 결정해야 한다.

	• 정확성과 완전성 : 사용자가 요구하는 기능을 충족시키는 정도로, 요구 분석 명세서와 일치하는 정도를 나타낸다.

	• 개발 용이성(구축 가능성) : 전체 시스템을 적절한 모듈로 분할한 후 개발 팀에 알맞게 분배하여 개발함으로써 정해진 기간 내에 완성하고, 개발 과정 중에도 쉽게 변경할 수 있는 능력을 말한다.

09. 이해 관계자별 품질 속성
	• 발주자 : 발주자는 제품 가격(또는 개발비)을 중요하게 보므로 입찰에서 개발비를 가장 적게 써낸 업체를 선정할 확률이 높다.

	• 사용자 : 사용자는 필요한 기능은 모두 만족시킨다고 가정한 상태에서 사용하기 쉽고 빨리 이해할 수 있는 아키텍처의 속성을 요구한다.

	• 개발자 : 개발자는 플랫폼이 달라져도 새로운 플랫폼에 쉽게 적용할 수 있는 아키텍처의 속성에 관심이 많다. 따라서 소프트웨어에 대한 변경 요청이 들어왔을 때 쉽게 변경할 수 있게 설계되기를 바란다.

*10. 아키텍처의 4+1 관점
	• 유스케이스 관점(사용자 기능) : 시스템이 사용자에게 제공하는 기능에 관심이 있다. (시스템 기능)

	• 논리적 관점 : 시스템 내부를 들여다본다. 즉 시스템의 기능을 제공하기 위해 필요한 클래스나 컴포넌트의 종류, 그리고 이들의 관계에 초점을 둔다.
	분석가/설계자
	
	• 구현 관점 : 물리적 시스템에서 사용하는 소프트웨어 서브시스템의 모듈(소스 코드, 데이터 파일, 컴포넌트, 실행 파일 등으로 구성)이 어떻게 구조화되어 있는가에 관심이 있다.
	프로그래머, 서브시스템의 모듈 구조의 관계
	
	• 프로세스 관점 : 개발자와 시스템 통합자를 위한 것으로, 실제 구동 환경을 살펴봄으로써 논리적 관점과 같이 시스템 내부의 구조(클래스 간의 관계, 클래스의 행동, 클래스 사이의 상호작용)에 초점을 맞추고 있다.
	개발자/시스템 통합자
	
	• 배치 관점 : 시스템을 구성하는 처리 장치 간의 물리적인 배치에 초점을 둔다.
	시스템 엔지니어
	
유스케이스 관점 (사용자)
•시스템이 사용자에게 제공하는 기능에 관심
•다른 네 가지 관점에 사용되는 다이어그램의 근간이 되어 분석 및 설계의 전 과정에 걸쳐 사용
•정적 표현 : 유스케이스 다이어그램
•동적 표현 : 상태 다이어그램, 순차 다이어그램, 통신 다이어그램, 활동 다이어그램

논리적 관점 (분석가/설계자)
•시스템의 기능에 관심이 있는 유스케이스 관점과 달리 시스템 내부를 들여다본다. 즉 시스템의 기능을 제공하기 위해 필요한 클래스나 컴포넌트의 종류와 이들의 관계에 초점
•정적 표현 : 클래스 다이어그램, 객체 다이어그램
•동적 표현 : 상태 다이어그램(클래스 내의 동작 표현), 순차·통신 다이어그램(클래스 간의 상호작용 표현), 활동 다이어그램(클래스의 연산 동작 표현)

구현 관점 (프로그래머)
•물리적 시스템에서 사용하는 소프트웨어 서브시스템의 모듈(원시 코드, 데이터 파일, 컴포넌트, 실행 파일 등으로 구성)이 어떻게 구조화되어 있는가에 관심
•정적 표현 : 컴포넌트 다이어그램
•동적 표현 : 상태 다이어그램, 순차 다이어그램, 통신 다이어그램, 활동 다이어그램	

프로세스 관점 (개발자와 시스템 통합자)
•개발자와 시스템 통합자를 위한 것으로, 실제 구동 환경을 살펴봄으로써 논리적 관점과 같이 시스템 내부의 구조(클래스 간의 관계, 클래스의 행동, 클래스 사이의 상호작용)에 초점을 맞추고 있다.
•독자적인 제어 스레드(thread)를 가질 수 있는 클래스에 초점을 맞춘다. 따라서 프로세스 관점은 시스템의 동시성과 동기화에 관심이 있다
•동적 표현 : 시간의 흐름에 따른 변화를 표현하는 상태 다이어그램, 순차 다이어그램, 협동 다이어그램, 활동 다이어그램
•시스템 구성 표현 : 구현을 위해 컴포넌트 다이어그램과 배치 다이어그램을 사용해 시스템 전체의 구성도를 표현

배치 관점 (시스템 엔지니어)
•시스템을 구성하는 처리 장치 간의 물리적인 배치에 초점을 둔다
• 다이어그램을 사용해 서브시스템들이 물리적인 환경에서 어떻게 연관되어 실행되는지를 노드 간의 관계로 나타낸다
•정적 표현 : 배치 다이어그램
•동적 표현 : 상태 다이어그램, 순차 다이어그램, 통신 다이어그램, 활동 다이어그램	
	
*11. 아키텍처 모델
	아키텍처 스타일을 기능 분할과 배치 및 제어 관계에 따라 모델화하여 그 결과로 얻어지는 스타일을 아키텍처 모델이라 부른다.

	• 데이터 중심형 모델 : 주요 데이터가 리포지토리(repository)에서 중앙 관리되어 리포지토리 모델(repository model)이라고도 한다. 리포지토리와 여기에 접근하는 서브시스템으로 구성된다.

	• 클라이언트-서버 모델 : 네트워크를 이용하는 분산 시스템 형태의 모델로, 데이터와 처리 기능을 클라이언트와 서버에 분할하여 사용한다. 서버, 서비스, 클라이언트로 구성되며, 서브시스템(컴포넌트)들이 서비스를 서로 요청하면서 상호작용한다.

	• 계층 모델 : 기능을 몇 개의 계층으로 나누어 배치한다. 데이터베이스를 많이 이용하는 소프트웨어에서는 3계층으로 구성한다.

	• MVC 모델 : 중앙 데이터 구조로, 시스템을 세 개의 서브시스템(Model, View, Controller)으로 나누어 구성한다.

	• 데이터 흐름 모델 : 파이프 필터 구조로, 필터에 해당되는 서브시스템이 하나의 데이터를 입력으로 받아 처리한 후 그 결과를 다음 서브시스템으로 넘겨주는 과정을 반복한다.

12. 디자인 패턴
	자주 사용하는 설계 형태를 정형화해서 이를 유형별로 설계 템플릿을 만들어둔 것이다. 디자인 패턴을 사용하면 효율성과 재사용성을 높일 수 있다. GoF는 디자인 패턴을 목적에 따라 25개의 유형으로 분류하고, 이와 유사한 설계 구조가 필요할 때 이 유형 중 하나를 설계 패턴으로 활용하도록 하였다.
	
[네이버 지식백과] 요약 (쉽게 배우는 소프트웨어 공학, 2015. 11. 30., 김치수)
